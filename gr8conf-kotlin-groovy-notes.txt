Why Kotlin

* Have fun
* less code, more productivity
* write once, deploy across JVM, JS, native, IOS, android, etc.
* similar to scala, but less complicated, compiles faster, and supports fewer advanced features
* simple like groovy, but more powerful static typing than @CompileStatic - example?
* first class functions
* extension functions like c# extension functions
* properties compile to fields and getter/setter
* singletons/objects
* null pointers create compile errors, use ? like groovy for nullable values, nullable annotations are pain
* explicit mutable/immutable
* when is more flexible than java switch, less than pattern matching scala
* no checked exceptions to simplify how developers handle them
* spread operator
* data classes like @Canonical
* sealed classes allow compile to deduce full set of allowable implementation types
* delegation allows composition to be used instead of inheritance, and allows for creation of dsl languages (along with extension functions)
- minimize syntactic overhead, maximize structure, remove boilerplate
* covariance/contravariance - in/out
* higher order functions as parameters, return values, properties
* coroutines allow lightweight concurrency
- async/await similar to c# and others
* excellent java/groovy interop

Comparisons to Groovy:

* Extension functions vs. extension modules
* data classes vs POGOs
* Nullability checks / no NPEs in Kotlin
* collection operators comparison
* Kotlin is statically typed, Groovy requires CompileStatic
* Groovy compileStatic with closures vs. kotlin
* Kotlin has powerful type inference, Groovy compiler requires more typing information
* Closures vs. lambdas
* higher-order functions
* sealed classes
* if/else assignment vs. ternary
* Concurrency - Groovy has CompletableFuture, GPars, and other libraries, Kotlin has coroutines/actors/channels/async-await and CompletableFuture and other libraries tools
* mutability - Groovy requires some library, Kotlin has it built in
* spread operator
* Kotlin has no checked exceptions - same as Groovy
* Kotlin provides delegation, lazy, lateinit keywords, Groovy has AST transformations (Delegate, Lazy, etc) via annotations
* Kotlin has singleton object, groovy uses Java static methods
* Interoperability with Java examples for Kotlin and Groovy
* Groovy runtime metaprogramming - closest in kotlin would be kotlin reflection
* Concise constructors in Kotlin vs. Java contructors or AST generated ones
* Simple DSL example in each
* Testing - Spock vs. Kotlintest/Spek/Junit5 with mockito-kotlin
